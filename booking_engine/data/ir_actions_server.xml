<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="update_city_tax_action" model="ir.actions.server">
        <field name="name">Add/Update City Tax</field>
        <field name="model_id" ref="x_model_city_tax"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
stay_tax_line = False
sequence = 0
for so_line in record.x_sale_order_id.order_line:
    if so_line.product_id.x_is_stay_tax: stay_tax_line = so_line
    sequence = max(sequence, so_line.sequence)
if stay_tax_line: stay_tax_line.write({'product_uom_qty': record.x_total, 'qty_delivered': record.x_total, 'sequence': 1 + sequence})
elif record.x_total > 0:
    product = env['product.product'].search([('x_is_stay_tax', '=', True)], limit=1)
    env['sale.order.line'].create({'order_id': record.x_sale_order_id.id, 'product_id': product.id, 'product_uom_qty': record.x_total, 'qty_delivered': record.x_total})
        ]]></field>
    </record>
    <record id="open_x_city_tax_action" model="ir.actions.server">
        <field name="name">Open City Tax</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
record.order_line.planning_slot_ids['x_guests'] = len(record.x_guests) // (len(record.order_line.planning_slot_ids) or 1) or 1
action = {
    'type': 'ir.actions.act_window',
    'name': 'City tax',
    'res_model': 'x_city_tax',
    'view_mode': 'form',
    'target': 'new',
    'context': {'search_default_x_sale_order_id': record.id, 'default_x_sale_order_id': record.id, 'default_x_slot_ids': record.order_line.planning_slot_ids.ids},
}   
]]></field>
    </record>
    <record id="industry_fix_slot_times" model="ir.actions.server">
        <field name="binding_model_id" ref="planning.model_planning_slot"/>
        <field name="model_id" ref="planning.model_planning_slot"/>
        <field name="usage">base_automation</field>
        <field name="state">code</field>
        <field name="name">Fix Slot Times</field>
        <field name="code"><![CDATA[
pickup_time = env.ref('sale_renting.recurrence_nightly').pickup_time
return_time = env.ref('sale_renting.recurrence_nightly').return_time
tz = env.ref('website.default_website').tz
for record in records:
    if not record.role_id.x_is_a_room_offer: continue
    start_datetime = record.start_datetime.astimezone(tz=dateutil.tz.UTC)
    end_datetime = record.end_datetime.astimezone(tz=dateutil.tz.UTC)
    if record.start_datetime and str(record.start_datetime.time()) != f"{int(pickup_time):02d}:{int(pickup_time % 1 * 60):02d}:00":
        start = timezone(tz).localize(datetime.datetime(year=start_datetime.year, month=start_datetime.month, day=start_datetime.day, hour=int(pickup_time), minute=int(pickup_time % 1 * 60), second=0))
        start_datetime = start.astimezone(tz=dateutil.tz.UTC)
        if start_datetime >= end_datetime:
            start_datetime = start_datetime - datetime.timedelta(days=1)
    if record.end_datetime and str(record.end_datetime.time()) != f"{int(return_time):02d}:{int(return_time % 1 * 60):02d}:00":
        end = timezone(tz).localize(datetime.datetime(year=end_datetime.year, month=end_datetime.month, day=end_datetime.day, hour=int(return_time), minute=int(return_time % 1 * 60), second=0))
        end_datetime = end.astimezone(tz=dateutil.tz.UTC)
        if start_datetime >= end_datetime:
            end_datetime = end_datetime + datetime.timedelta(days=1)
    record['start_datetime'] = start_datetime.replace(tzinfo=None)
    record['end_datetime'] = end_datetime.replace(tzinfo=None)
for record in records:
    nights = 0
    if record.sale_line_id.planning_slot_ids:
        nights = sum(record.sale_line_id.planning_slot_ids.mapped('x_nights'))
    record.sale_line_id.update({
        'start_date': record.start_datetime,
        'return_date': record.end_datetime,
        'x_nights': nights,
    })
    record.sale_line_id._reset_price_unit()
]]></field>
    </record>
    <record id="industry_set_rental_hours" model="ir.actions.server">
        <field name="name">Set Rental Start/Return Hours</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="usage">base_automation</field>
        <field name="state">code</field>
        <field name="code"><![CDATA[
pickup_time = env.ref('sale_renting.recurrence_nightly').pickup_time
return_time = env.ref('sale_renting.recurrence_nightly').return_time
for record in records:
    tz = env.ref('website.default_website').tz
    rental_start_date = record.rental_start_date.astimezone(tz=dateutil.tz.gettz(tz))
    start = rental_start_date.replace(hour=int(pickup_time), minute=int(pickup_time % 1 * 60), second=0)
    record['rental_start_date'] = start.astimezone(tz=dateutil.tz.UTC).replace(tzinfo=None)

    rental_return_date = record.rental_return_date.astimezone(tz=dateutil.tz.gettz(tz))
    end = rental_return_date.replace(hour=int(return_time), minute=int(return_time % 1 * 60), second=0)
    record['rental_return_date'] = end.astimezone(tz=dateutil.tz.UTC).replace(tzinfo=None)
    record.action_update_rental_prices()
]]></field>
    </record>
    <record id="apply_rental_check_out" model="ir.actions.server">
        <field name="name">Apply Rental Checkout</field>
        <field name="model_id" ref="sale_renting.model_rental_order_wizard"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
record.apply()
if record.order_id.rental_status == "returned":
    server_action = record.env['ir.actions.server'].browse(record.env.ref('booking_engine.open_x_city_tax_action').id)
    action = server_action.with_context(active_id=record.order_id.id, active_model="sale.order").sudo().run()
]]></field>
    </record>
</odoo>
