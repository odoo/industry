<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="industry_add_update" model="ir.actions.server">
        <field name="name">Add/Update City Tax</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="usage">base_automation</field>
        <field name="state">code</field>
        <field name="code"><![CDATA[for record in records:
    stay_taxes = 0
    stay_tax_line = False
    for so_line in record.order_line:
        if so_line.product_id.x_is_a_room_offer:
            if so_line.x_nights > 0: stay_taxes += so_line.x_nights
        if so_line.product_id.x_is_stay_tax: stay_tax_line = so_line
    if stay_taxes > 0:
        if stay_tax_line: stay_tax_line['product_uom_qty'] = stay_taxes
        else: # Add stay tax product
            product = env['product.product'].search([('x_is_stay_tax', '=', True)], limit=1)
            env['sale.order.line'].create({'order_id': record.id, 'product_id': product.id, 'product_uom_qty': stay_taxes})
        ]]></field>
    </record>
    <record id="industry_trigger_so_update_from_slot" model="ir.actions.server">
        <field name="name">Trigger SO Update from Slot</field>
        <field name="model_id" ref="planning.model_planning_slot"/>
        <field name="usage">base_automation</field>
        <field name="state">code</field>
        <field name="code"><![CDATA[
sale_order = record.sale_order_id
if sale_order:
    stay_taxes = 0
    stay_tax_line = False
    for so_line in sale_order.order_line:
        if so_line.product_id.x_is_a_room_offer:
            if so_line.x_nights > 0:
                stay_taxes += so_line.x_nights
        if so_line.product_id.x_is_stay_tax:
            stay_tax_line = so_line
    if stay_taxes > 0:
        if stay_tax_line:
            stay_tax_line['product_uom_qty'] = stay_taxes
]]></field>
    </record>
  <record id="industry_fix_slot_times" model="ir.actions.server">
    <field name="binding_model_id" ref="planning.model_planning_slot"/>
    <field name="model_id" ref="planning.model_planning_slot"/>
    <field name="usage">base_automation</field>
    <field name="state">code</field>
    <field name="name">Fix Slot Times</field>
    <field name="code"><![CDATA[def ceil(x):
    return int(x) if x == int(x) else int(x) + 1
pickup_time = env.ref('sale_renting.recurrence_nightly').pickup_time
return_time = env.ref('sale_renting.recurrence_nightly').return_time
start_datetime = record.start_datetime.astimezone(tz=dateutil.tz.UTC)
end_datetime = record.end_datetime.astimezone(tz=dateutil.tz.UTC)
tz = env.ref('website.default_website').tz
if record.role_id.x_is_a_room_offer:
    if record.start_datetime and str(record.start_datetime.time()) != f"{int(pickup_time):02d}:{int(pickup_time % 1 * 60):02d}:00":
        start = timezone(tz).localize(datetime.datetime(year=start_datetime.year, month=start_datetime.month, day=start_datetime.day, hour=int(pickup_time), minute=int(pickup_time % 1 * 60), second=0))
        start_datetime = start.astimezone(tz=dateutil.tz.UTC)
        if start_datetime >= end_datetime:
            start_datetime = start_datetime - datetime.timedelta(days=1)
    if record.end_datetime and str(record.end_datetime.time()) != f"{int(return_time):02d}:{int(return_time % 1 * 60):02d}:00":
        end = timezone(tz).localize(datetime.datetime(year=end_datetime.year, month=end_datetime.month, day=end_datetime.day, hour=int(return_time), minute=int(return_time % 1 * 60), second=0))
        end_datetime = end.astimezone(tz=dateutil.tz.UTC)
        if start_datetime >= end_datetime:
            end_datetime = end_datetime + datetime.timedelta(days=1)
    record['start_datetime'] = start_datetime.replace(tzinfo=None)
    record['end_datetime'] = end_datetime.replace(tzinfo=None)
if record.sale_line_id:
    nights = 0
    if record.sale_line_id.planning_slot_ids:
        for slot in record.sale_line_id.planning_slot_ids:
            if slot.start_datetime and slot.end_datetime:
                nights += ceil((slot.end_datetime - slot.start_datetime).total_seconds() / (24 * 3600))
    record.sale_line_id.update({
        'start_date': record.start_datetime,
        'return_date': record.end_datetime,
        'x_nights': nights,
    })
    record.sale_line_id._reset_price_unit()
]]></field>
    </record>
    <record id="industry_set_rental_hours" model="ir.actions.server">
        <field name="name">Set Rental Start/Return Hours</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="usage">base_automation</field>
        <field name="state">code</field>
        <field name="code"><![CDATA[
pickup_time = env.ref('sale_renting.recurrence_nightly').pickup_time
return_time = env.ref('sale_renting.recurrence_nightly').return_time
for record in records:
    tz = env.ref('website.default_website').tz
    rental_start_date = record.rental_start_date.astimezone(tz=dateutil.tz.gettz(tz))
    rental_return_date = record.rental_return_date.astimezone(tz=dateutil.tz.gettz(tz))
    start = rental_start_date.replace(hour=int(pickup_time), minute=int(pickup_time % 1 * 60), second=0, microsecond=0)
    start_datetime = start.astimezone(tz=dateutil.tz.UTC)
    record['rental_start_date'] = start_datetime.replace(tzinfo=None)
    end = rental_return_date.replace(hour=int(return_time), minute=int(return_time % 1 * 60), second=0, microsecond=0)
    end_datetime = end.astimezone(tz=dateutil.tz.UTC)
    record['rental_return_date'] = end_datetime.replace(tzinfo=None)
    record.action_update_rental_prices()
]]></field>
    </record>
</odoo>
