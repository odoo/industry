<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="field_res_partner_is_technical_partner" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="field_description">Is a Technical Partner</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_is_technical_partner</field>
    </record>
    <record id="field_product_category_is_properties_category" model="ir.model.fields">
        <field name="name">x_is_properties_category</field>
        <field name="ttype">boolean</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Is Properties Category</field>
        <field name="model_id" ref="product.model_product_category"/>
    </record>
    <record id="field_product_template_is_properties_category" model="ir.model.fields">
        <field name="name">x_is_properties</field>
        <field name="ttype">boolean</field>
        <field name="related">categ_id.x_is_properties_category</field>
        <field name="field_description">Is Properties</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="readonly" eval="True"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_technical_partner_id" model="ir.model.fields">
        <field name="name">x_technical_partner_id</field>
        <field name="ttype">many2one</field>
        <field name="field_description">Technical Partner</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="domain" eval="[('x_is_technical_partner', '=', True)]"/>
    </record>
    <record id="field_product_template_street" model="ir.model.fields">
        <field name="name">x_street</field>
        <field name="ttype">char</field>
        <field name="related">x_technical_partner_id.street</field>
        <field name="field_description">Street</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_zip" model="ir.model.fields">
        <field name="name">x_zip_code</field>
        <field name="ttype">char</field>
        <field name="related">x_technical_partner_id.zip</field>
        <field name="field_description">Zip Code</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_city" model="ir.model.fields">
        <field name="name">x_city</field>
        <field name="ttype">char</field>
        <field name="related">x_technical_partner_id.city</field>
        <field name="field_description">City</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_country" model="ir.model.fields">
        <field name="name">x_country</field>
        <field name="ttype">many2one</field>
        <field name="related">x_technical_partner_id.country_id</field>
        <field name="field_description">Country</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.country</field>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_owner_id" model="ir.model.fields">
        <field name="name">x_owner_id</field>
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Owner</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_product_template_coowners_ids" model="ir.model.fields">
        <field name="name">x_co_owners_ids</field>
        <field name="ttype">many2many</field>
        <field name="field_description">Co-owners</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="relation_table">x_product_template_res_partner_rel_coowners</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_product_template_notary_id" model="ir.model.fields">
        <field name="name">x_notary_id</field>
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Notary</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_product_template_developer_id" model="ir.model.fields">
        <field name="name">x_developer_id</field>
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Developer</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_product_template_contractors_ids" model="ir.model.fields">
        <field name="name">x_contractors_ids</field>
        <field name="ttype">many2many</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Contractors</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="relation">res.partner</field>
        <field name="relation_table">x_product_template_res_partner_rel_contractors</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_product_ribbon_is_draft_ribbon" model="ir.model.fields">
        <field name="name">x_is_draft_ribbon</field>
        <field name="model_id" ref="website_sale.model_product_ribbon"/>
        <field name="ttype">boolean</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Is Draft Ribbon</field>
    </record>
    <record id="field_product_ribbon_is_closed_ribbon" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Is Closed Ribbon</field>
        <field name="model_id" ref="website_sale.model_product_ribbon"/>
        <field name="name">x_is_closed_ribbon</field>
    </record>
    <record id="field_crm_lead_interested_in_id" model="ir.model.fields">
        <field name="name">x_interested_in_id</field>
        <field name="field_description">Interested in</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="relation">product.template</field>
    </record>
    <record id="field_product_template_interested_in_count" model="ir.model.fields">
        <field name="name">x_x_interested_in_crm_lead_count</field>
        <field name="field_description">Interested in count</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="ttype">integer</field>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
        <field name="compute"><![CDATA[
lead_data = self.env['crm.lead']._read_group(domain=[('x_interested_in_id', 'in', self.ids)], groupby=['x_interested_in_id'], aggregates=['__count'])
mapped_data = {product.id: count for product, count in lead_data}
for product in self: product['x_x_interested_in_crm_lead_count'] = mapped_data.get(product.id, 0)
        ]]></field>
    </record>
    <record id="field_res_partner_regions_ids" model="ir.model.fields">
        <field name="name">x_region_ids</field>
        <field name="field_description">Regions</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">many2many</field>
        <field name="copied" eval="True"/>
        <field name="relation">product.attribute.value</field>
        <field name="relation_table">x_product_attribute_value_res_partner_rel</field>
        <field name="domain" eval="[('attribute_id', '=', ref('product_attribute_10'))]"/>
    </record>
    <record id="field_res_partner_categories_ids" model="ir.model.fields">
        <field name="name">x_categories_ids</field>
        <field name="field_description">Categories</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">many2many</field>
        <field name="copied" eval="True"/>
        <field name="relation">product.public.category</field>
        <field name="relation_table">x_product_public_category_res_partner_rel</field>
    </record>
    <record id="field_res_partner_min_price" model="ir.model.fields">
        <field name="name">x_min_price</field>
        <field name="field_description">Min Price</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">integer</field>
        <field name="copied" eval="True"/>
    </record>
    <record id="field_res_partner_max_price" model="ir.model.fields">
        <field name="name">x_max_price</field>
        <field name="field_description">Max Price</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">integer</field>
        <field name="copied" eval="True"/>
    </record>
    <record id="field_res_partner_type_ids" model="ir.model.fields">
        <field name="name">x_type</field>
        <field name="field_description">Type</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">many2many</field>
        <field name="copied" eval="True"/>
        <field name="relation">product.attribute.value</field>
        <field name="relation_table">x_product_attribute_value_res_partner_rel_1</field>
        <field name="domain" eval="[('attribute_id', '=', ref('product_attribute_11'))]"/>
    </record>
    <record id="field_res_partner_condition_ids" model="ir.model.fields">
        <field name="name">x_condition_ids</field>
        <field name="field_description">Condition</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="ttype">many2many</field>
        <field name="copied" eval="True"/>
        <field name="relation">product.attribute.value</field>
        <field name="relation_table">x_product_attribute_value_res_partner_rel_2</field>
        <field name="domain" eval="[('attribute_id', '=', ref('product_attribute_12'))]"/>
    </record>
    <record id="field_res_partner_subscribe" model="ir.model.fields">
        <field name="name">x_subscribe</field>
        <field name="ttype">boolean</field>
        <field name="field_description">Subscribe</field>
        <field name="model_id" ref="base.model_res_partner"/>
    </record>
    <record id="field_crm_team_is_sellers_team" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Is Sellers Team</field>
        <field name="model_id" ref="sales_team.model_crm_team"/>
        <field name="name">x_is_sellers_team</field>
    </record>
    <record id="field_crm_team_is_buyers_team" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Is Buyers Team</field>
        <field name="model_id" ref="sales_team.model_crm_team"/>
        <field name="name">x_is_a_buyer_team</field>
    </record>
    <record id="field_crm_lead_property_id" model="ir.model.fields">
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Selling/Renting</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="name">x_property_id</field>
        <field name="relation">product.template</field>
    </record>
    <record id="field_res_partner_owner_count" model="ir.model.fields">
        <field name="compute"><![CDATA[
property_data = self.env['product.template']._read_group(domain=[('x_owner_id', 'in', self.ids)], groupby=['x_owner_id'], aggregates=['__count'])
mapped_data = {partner.id: count for partner, count in property_data}
for partner in self: partner['x_x_owner_product_template_count'] = mapped_data.get(partner.id, 0)
        ]]></field>
        <field name="ttype">integer</field>
        <field name="field_description">Owner count</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_x_owner_product_template_count</field>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_agent_id" model="ir.model.fields">
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Agent</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_agent_id</field>
        <field name="relation">res.users</field>
        <field name="tracking">1</field>
    </record>
    <record id="field_product_template_attribute_value_ids" model="ir.model.fields">
        <field name="name">x_attribute_value_ids</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="field_description">Attribute values</field>
        <field name="ttype">many2many</field>
        <field name="readonly" eval="True"/>
        <field name="related">attribute_line_ids.value_ids</field>
        <field name="relation">product.attribute.value</field>
        <field name="store" eval="False"/>
     </record>
    <record id="field_product_template_matching_partners" model="ir.model.fields">
        <field name="compute"><![CDATA[
attribute_field_names = self.env['ir.model.fields'].search_fetch([("ttype", "in", ["many2many", "many2one"]), ("relation", "=", "product.attribute.value"), ("model_id", "=", self.env.ref('base.model_res_partner').id)], ['name']).mapped('name')
for record in self:
    if not record.id or not record.x_is_properties or record.x_is_closed: record['x_contact_matches_properties'] = False
    # Matching model with at least 1 criteria
    filters = ["|" for i in range(len(attribute_field_names) - 1)]
    for attribute_field_name in attribute_field_names:
        filters += [(attribute_field_name, "!=", False)]
    filters += ["|", "|", ("x_min_price", "!=", 0), ("x_max_price", "!=", 0), ("x_categories_ids", "!=", False)]
    # Price - Specific window
    filters += ["|", ("x_min_price", "=", 0), ("x_min_price", "<=", record.list_price), "|", ("x_max_price", "=", 0), ("x_max_price", ">=", record.list_price)]
    # Categories - Specific list
    filters += ["|", ("x_categories_ids", "=", False), ("x_categories_ids", "in", record.public_categ_ids.ids)]
    # Attribute is either undefined or matching - Generic on any field added to contact form related to product.attributes as m2o or m2m
    for attribute_field_name in attribute_field_names:
        filters += ["|", (attribute_field_name, "=", False), (attribute_field_name, "in", record.x_attribute_value_ids.ids)]
    # Query leveraging domain
    record['x_contact_matches_properties'] = self.env['res.partner'].search(filters)
        ]]></field>
        <field name="ttype">many2many</field>
        <field name="depends">categ_id, public_categ_ids, attribute_line_ids, list_price, website_ribbon_id</field>
        <field name="field_description">Contact matches (Properties)</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_contact_matches_properties</field>
        <field name="readonly" eval="True"/>
        <field name="relation">res.partner</field>
        <field name="relation_table">x_product_template_res_partner_rel</field>
        <field name="domain" eval="[('x_is_technical_partner', '!=', True)]"/>
    </record>
    <record id="field_res_partner_contact_matches_properties_count" model="ir.model.fields">
        <field name="compute"><![CDATA[
property_data = self.env['product.template']._read_group(domain=[('x_contact_matches_properties', 'in', self.ids)], groupby=['x_contact_matches_properties'], aggregates=['__count'])
mapped_data = {partner.id: count for partner, count in property_data}
for partner in self: partner['x_x_contact_matches_properties_product_template_count'] = mapped_data.get(partner.id, 0)
        ]]></field>
        <field name="ttype">integer</field>
        <field name="field_description">Contact matches (Properties) count</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_x_contact_matches_properties_product_template_count</field>
        <field name="readonly" eval="True"/>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_res_partner_matching_properties" model="ir.model.fields">
        <field name="compute"><![CDATA[
attribute_field_names = self.env['ir.model.fields'].search_fetch([("ttype", "in", ["many2many", "many2one"]), ("relation", "=", "product.attribute.value"), ("model_id", "=", self.env.ref('base.model_res_partner').id)], ['name']).mapped('name')
for record in self:
    filters = []
    pav = self.env['product.attribute.value']
    # Attributes - Generic on any field added to contact form related to product.attributes as m2o or m2m
    for afn in attribute_field_names:
        if record[afn]:
            pav += record[afn]
    if pav: filters += [("attribute_line_ids.value_ids", "in", pav.ids)]
    # Price - Specific window
    if record.x_min_price > 0: filters += [("list_price", ">=", record.x_min_price)]
    if record.x_max_price > 0: filters += [("list_price", "<=", record.x_max_price)]
    # Categories - Specific list
    if record.x_categories_ids: filters += [("public_categ_ids", "in", record.x_categories_ids.ids)]
    # Query leveraging domain
    if filters: record['x_property_matches_contacts'] = [(6, 0, self.env['product.template'].search_fetch([('x_is_properties', '=', True), ('x_is_closed', '=', False)] + filters, ['id']).ids)]
    else: record['x_property_matches_contacts'] = False 
        ]]></field>
        <field name="ttype">many2many</field>
        <field name="depends">x_categories_ids, x_region_ids, x_type, x_condition_ids, x_min_price, x_max_price</field>
        <field name="field_description">Property matches (Contacts)</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_property_matches_contacts</field>
        <field name="readonly" eval="True"/>
        <field name="relation">product.template</field>
        <field name="relation_table">x_product_template_res_partner_rel</field>
    </record>
    <record id="field_product_template_contact_matches_properties_count" model="ir.model.fields">
        <field name="compute"><![CDATA[
partner_data = self.env['res.partner']._read_group(domain=[('x_property_matches_contacts', 'in', self.ids)], groupby=['x_property_matches_contacts'], aggregates=['__count'])
mapped_data = {property.id: count for property, count in partner_data}
for property in self: property['x_x_property_matches_contacts_res_partner_count'] = mapped_data.get(property.id, 0)
        ]]></field>
        <field name="ttype">integer</field>
        <field name="depends">x_contact_matches_properties</field>
        <field name="field_description">Property matches (Contacts) count</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_x_property_matches_contacts_res_partner_count</field>
        <field name="readonly" eval="True"/>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_appointment_type_property_id" model="ir.model.fields">
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Property</field>
        <field name="model_id" ref="appointment.model_appointment_type"/>
        <field name="name">x_property_id</field>
        <field name="relation">product.template</field>
    </record>
    <record id="field_product_template_appointment_ids" model="ir.model.fields">
        <field name="ttype">one2many</field>
        <field name="field_description">Appointments</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_appointment_ids</field>
        <field name="relation">appointment.type</field>
        <field name="relation_field">x_property_id</field>
    </record>
    <record id="field_calendar_event_property_id" model="ir.model.fields">
        <field name="ttype">many2one</field>
        <field name="related">appointment_type_id.x_property_id</field>
        <field name="field_description">Property</field>
        <field name="model_id" ref="calendar.model_calendar_event"/>
        <field name="name">x_property_id</field>
        <field name="readonly" eval="True"/>
        <field name="relation">product.template</field>
    </record>
    <record id="field_product_template_calendar_event_count" model="ir.model.fields">
        <field name="compute"><![CDATA[
event_data = self.env['calendar.event']._read_group(domain=[('x_property_id', 'in', self.ids)], groupby=['x_property_id'], aggregates=['__count'])
mapped_data = {property.id: count for property, count in event_data}
for property in self: property['x_x_property_calendar_event_count'] = mapped_data.get(property.id, 0)
        ]]></field>
        <field name="ttype">integer</field>
        <field name="field_description">Property count</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_x_property_calendar_event_count</field>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_crm_lead_appointments" model="ir.model.fields">
        <field name="ttype">one2many</field>
        <field name="related">x_interested_in_id.x_appointment_ids</field>
        <field name="field_description">Appointments</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="name">x_appointment_ids</field>
        <field name="readonly" eval="True"/>
        <field name="relation">appointment.type</field>
        <field name="relation_field">x_property_id</field>
        <field name="store" eval="False"/>
    </record>
    <record id="field_product_template_is_closed_ribbon" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="related">website_ribbon_id.x_is_closed_ribbon</field>
        <field name="field_description">Is Closed</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_is_closed</field>
        <field name="readonly" eval="True"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_res_partner_last_nofication" model="ir.model.fields">
        <field name="ttype">datetime</field>
        <field name="field_description">Last notification</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_last_notification</field>
        <field name="readonly" eval="True"/>
    </record>
    <record id="field_res_partner_to_notify_property_ids" model="ir.model.fields">
        <field name="compute"><![CDATA[
for record in self: record['x_to_notify_property_ids'] = [(6, 0, record.x_property_matches_contacts.filtered(lambda p, ln=record.x_last_notification: p.is_published and (not p.x_last_notification_update or not ln or ln < p.x_last_notification_update)).ids)]
        ]]></field>
        <field name="ttype">many2many</field>
        <field name="depends">x_property_matches_contacts, x_last_notification</field>
        <field name="field_description">To notify properties</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_to_notify_property_ids</field>
        <field name="readonly" eval="True"/>
        <field name="relation">product.template</field>
        <field name="relation_table">x_product_template_res_partner_rel_to_notify</field>
    </record>
    <record id="field_product_template_last_notification_update" model="ir.model.fields">
        <field name="ttype">datetime</field>
        <field name="field_description">Last notification update</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_last_notification_update</field>
    </record>
    <record id="field_product_template_construction_year" model="ir.model.fields">
        <field name="ttype">char</field>
        <field name="field_description">Construction Year</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_construction_year</field>
    </record>
    <record id="field_product_template_last_renovation" model="ir.model.fields">
        <field name="ttype">char</field>
        <field name="field_description">Last Renovation</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_last_renovation</field>
    </record>
    <record id="field_product_template_living_surface" model="ir.model.fields">
        <field name="ttype">integer</field>
        <field name="field_description">Living Surface</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_living_surface</field>
    </record>
    <record id="field_product_template_field_surface" model="ir.model.fields">
        <field name="ttype">integer</field>
        <field name="field_description">Field Surface</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_field_surface</field>
    </record>
    <record id="field_product_template_orientation" model="ir.model.fields">
        <field name="ttype">selection</field>
        <field name="field_description">Orientation</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_orientation</field>
    </record>
    <record id="field_product_template_orientation_selection_south" model="ir.model.fields.selection">
        <field name="name">South</field>
        <field name="field_id" ref="field_product_template_orientation" />
        <field name="value">South</field>
    </record>
    <record id="field_product_template_orientation_selection_east" model="ir.model.fields.selection">
        <field name="name">East</field>
        <field name="field_id" ref="field_product_template_orientation" />
        <field name="value">East</field>
    </record>
    <record id="field_product_template_orientation_selection_north" model="ir.model.fields.selection">
        <field name="name">North</field>
        <field name="field_id" ref="field_product_template_orientation" />
        <field name="value">North</field>
    </record>
    <record id="field_product_template_orientation_selection_west" model="ir.model.fields.selection">
        <field name="name">West</field>
        <field name="field_id" ref="field_product_template_orientation" />
        <field name="value">West</field>
    </record>
    <record id="field_product_template_ribbon_stage_accounted" model="ir.model.fields">
        <field name="ttype">boolean</field>
        <field name="field_description">Ribbon stage is accounted</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_ribbon_stage_is_accounted</field>
    </record>
    <record id="field_product_template_line_sequence" model="ir.model.fields">
        <field name="ttype">integer</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Sequence</field>
        <field name="model_id" ref="product_template_line_model"/>
        <field name="name">x_sequence</field>
    </record>
    <record id="field_product_template_line_description" model="ir.model.fields">
        <field name="ttype">char</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Identifier</field>
        <field name="model_id" ref="product_template_line_model"/>
        <field name="name">x_name</field>
        <field name="required" eval="True"/>
        <field name="translate">standard</field>
    </record>
    <record id="field_product_template_line_property_id" model="ir.model.fields">
        <field name="ttype">many2one</field>
        <field name="copied" eval="True"/>
        <field name="field_description">Property</field>
        <field name="model_id" ref="product_template_line_model"/>
        <field name="name">x_product_template_id</field>
        <field name="relation">product.template</field>
    </record>
    <record id="field_product_template_reference_ids" model="ir.model.fields">
        <field name="ttype">one2many</field>
        <field name="field_description">External References</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_reference_ids</field>
        <field name="relation">x_product_template_line</field>
        <field name="relation_field">x_product_template_id</field>
    </record>
    <record id="field_res_partner_interested_in_ids" model="ir.model.fields">
        <field name="compute"><![CDATA[
all_leads = self.env['crm.lead']._read_group(domain=[('id', 'in', self.opportunity_ids.ids), ('x_interested_in_id', '!=', False)], groupby=['partner_id'], aggregates=['x_interested_in_id:array_agg'])
data = {partner.id: properties for partner, properties in all_leads}
for partner in self: partner['x_interested_in_ids'] = [(6, 0, data.get(partner.id, []))]
        ]]></field>
        <field name="ttype">many2many</field>
        <field name="depends">opportunity_ids</field>
        <field name="field_description">Interested in</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="name">x_interested_in_ids</field>
        <field name="readonly" eval="True"/>
        <field name="relation">product.template</field>
        <field name="relation_table">x_product_template_res_partner_rel_interested_in</field>
    </record>
    <record id="field_product_template_book_url" model="ir.model.fields">
        <field name="ttype">char</field>
        <field name="related">x_appointment_ids.appointment_invite_ids.book_url</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="name">x_booking_link</field>
        <field name="readonly" eval="True"/>
        <field name="selectable" eval="False"/>
        <field name="store" eval="False"/>
    </record>
    <record id="field_account_move_seller" model="ir.model.fields">
        <field name="name">x_seller</field>
        <field name="field_description">Seller</field>
        <field name="ttype">many2one</field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="relation">res.users</field>
    </record>
    <record id="x_receiver_customer_field" model="ir.model.fields">
        <field name="name">x_receiver</field>
        <field name="field_description">Receiver</field>
        <field name="ttype">selection</field>
        <field name="model_id" ref="sale_commission.model_sale_commission_plan_achievement"/>
        <field name="help">If a seller is defined on the invoice and is different from the salesperson, then an adjustment will be performed automatically on commissions to reward the seller. Otherwise, the salesperson is rewarded both the salesperson and seller shares.</field>
    </record>
    <record id="x_receiver_customer_field_selection_salesperson" model="ir.model.fields.selection">
        <field name="name">Salesperson</field>
        <field name="field_id" ref="x_receiver_customer_field" />
        <field name="value">Salesperson</field>
    </record>
    <record id="x_receiver_customer_field_selection_seller" model="ir.model.fields.selection">
        <field name="name">Seller</field>
        <field name="field_id" ref="x_receiver_customer_field" />
        <field name="value">Seller</field>
    </record>
    <record id="field_is_offer_sign_template" model="ir.model.fields">
        <field name="name">x_is_offer</field>
        <field name="field_description">Is Offer</field>
        <field name="model_id" ref="sign.model_sign_template"/>
        <field name="ttype">boolean</field>
    </record>
</odoo>
