<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="ir_act_server_split_per_property" model="ir.actions.server">
        <field name="name">Split per Owner</field>
        <field name="state">code</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="code"><![CDATA[
distributions = record.sudo().pricelist_id.x_ratios # By default, we assume that there is a pricelist/distribution key set on the SO
owner_field = 'x_owner'
key_field = 'x_ratio'
analytic_account_field = 'x_property'
total_distribution = sum(distributions.mapped(key_field))
if total_distribution == 0: # If there is no pricelist/distribution key set on the SO, we use the area as distribution
    distributions = record.sudo().partner_id.x_condominium_properties
    owner_field = 'partner_id'
    key_field = 'x_area'
    analytic_account_field = '' # There is no field since the property is an analytic account
    total_distribution = sum(distributions.mapped(key_field))
if total_distribution == 0:
    raise UserError("Cannot split the Sales Orders because there is not distribution key in the pricelist nor areas")
owners = env['res.partner'].search([('x_companies', 'in', record.company_id.id)])
for owner in owners:  # One SO per owner
    new_so = record.copy()
    new_so['x_source_sales_order'] = record.id
    new_so['partner_id'] = owner.id
    new_so.order_line.unlink() # Remove the lines that were copied from the source SO
    new_so_lines = []
    for sol in record.order_line: # The lines are re-created using the distribution key and the analytic account corresponding to the property is set
        for distribution in distributions:
            if distribution[owner_field].id == owner.id:
                analytic_account = distribution if not analytic_account_field else distribution[analytic_account_field]
                new_so_lines.append((0, 0, {
                    'order_id': record.id,
                    'product_id': sol.product_id.id,
                    'name': sol.name,
                    'product_uom_qty': sol.product_uom_qty,
                    'product_uom_id': sol.product_uom_id.id,
                    'price_unit': sol.price_unit * distribution[key_field] / total_distribution,
                    'tax_ids': sol.tax_ids,
                    'discount': sol.discount,
                    'analytic_distribution': {analytic_account.id: 100},
                }))
    new_so.write({'order_line': new_so_lines})
record['state'] = 'cancel'
]]></field>
    </record>
    <record id="ir_actions_server_compute_ratio" model="ir.actions.server">
        <field name="name">Compute Ratios</field>
        <field name="state">code</field>
        <field name="model_id" ref="product.model_product_pricelist"/>
        <field name="binding_model_id" ref="product.model_product_pricelist"/>
        <field name="code"><![CDATA[
for pricelist in records:
    if (properties := env['account.analytic.account'].search([('x_is_a_property', '=', True), ('id', 'not in', pricelist.x_ratios.x_property.ids)])):
        pricelist.write({'x_ratios': [(0, 0, {
            'x_pricelist': pricelist.id,
            'x_property': property.id,
            'x_ratio': property.x_area,
        }) for property in properties]})
]]></field>
    </record>
    <record id="ir_actions_server_distribute_costs" model="ir.actions.server">
        <field name="name">Distribute Costs</field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
x_ratios = record.sudo().x_distribution_key.x_ratios
total_ratio = sum(x_ratios.mapped('x_ratio'))
analytic_distribution = {}
if total_ratio != 0:
    for ratio in x_ratios.filtered(lambda l: l.x_ratio != 0):
        analytic_distribution[ratio.x_property.id] = ratio.x_ratio / total_ratio * 100
else: # If there is no pricelist/distribution key set, we use the area
    properties = record.sudo().company_id.partner_id.x_condominium_properties
    total_area = sum(properties.mapped('x_area'))
    if total_area != 0:
        for property in properties.filtered(lambda l: l.x_area != 0):
            analytic_distribution[property.id] = property.x_area / total_area * 100
for aml in record.invoice_line_ids:
    aml['analytic_distribution'] = analytic_distribution
]]></field>
    </record>
    <record id="ir_act_server_confirm_action" model="ir.actions.server">
        <field name="name">Confirm</field>
        <field name="state">code</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="binding_model_id" ref="sale.model_sale_order"/>
        <field name="code"><![CDATA[
records.action_confirm()
]]></field>
    </record>
    <record id="action_server_set_usage_meter_reading" model="ir.actions.server" >
        <field name="name">Meter Reading</field>
        <field name="model_id" ref="model_meter_reading"/>
        <field name="state">code</field>
        <field name="base_automation_id" ref="automation_set_usage_meter_reading"/>
        <field name="code"><![CDATA[
mrs = env['x_meter_reading'].search([
    ('id', 'in', record.x_account_analytic_account_id.x_property_meter_reading_ids.ids),
    ('x_meter_id', '=', record.x_meter_id.id)], order='x_date')
previous_mr = False
for mr in mrs:
    mr['x_usage'] = mr['x_quantity'] - previous_mr['x_quantity'] if previous_mr else 0
    previous_mr = mr
]]>
        </field>
    </record>
    <record id="action_view_company_partner" model="ir.actions.server">
        <field name="name">Open company partner form view</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code"><![CDATA[
action = env['ir.actions.act_window']._for_xml_id('condominium.condo_act_window')
action['res_id'] = env.company.partner_id.id]]>
        </field>
    </record>
    <record id="ir_action_create_condominium" model="ir.actions.server">
        <field name="code"><![CDATA[env['res.company'].create({
    'partner_id': record.id,
    'name': record.name,
    'street': record.street,
    'street2': record.street2,
    'zip': record.zip,
    'city': record.city,
    'state_id': record.state_id.id,
    'country_id': record.country_id.id,
    'vat': record.vat,
    'phone': record.phone,
    'email': record.email,
    'website': record.website,
    'logo': record.image_1920,
})
action = {'type': 'ir.actions.client', 'tag': 'reload'}]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Create Condominium</field>
  </record>
</odoo>
