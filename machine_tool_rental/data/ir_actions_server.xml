<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="compute_run_time_increment" model="ir.actions.server">
        <field name="code"><![CDATA[
rtms = env['x_run_time_meter'].search([('id', 'in', records.x_serial_id.x_run_time_meter_ids.ids)], order='x_serial_id, x_date')
for i in range(len(rtms)):
    rtms[i]['x_run_time_increment_h'] = rtms[i].x_run_time - (rtms[i - 1].x_run_time if i > 0 and rtms[i - 1].x_serial_id == rtms[i].x_serial_id else 0)
    ]]></field>
        <field name="model_id" ref="x_run_time_meter_model"/>
        <field name="state">code</field>
        <field name="name">Compute Run-Time Increment</field>
        <field name="usage">base_automation</field>
    </record>
    <record id="run_time_meter_when_done" model="ir.actions.server">
        <field name="code"><![CDATA[
for task in records: task['x_run_time_meter_when_done'] = task.x_serial_id.x_run_time_meter_h
    ]]></field>
        <field name="model_id" ref="project.model_project_task"/>
        <field name="state">code</field>
        <field name="name">Run-Time Meter When Done</field>
        <field name="usage">base_automation</field>
    </record>
    <record id="create_recurrent_tasks_server_action" model="ir.actions.server">
        <field name="name">Create Recurrent Tasks Based On Recurring Maintenance Rules</field>
        <field name="model_id" ref="stock.model_stock_lot"/>
        <field name="state">code</field>
        <field name="usage">ir_cron</field>
        <field name="code"><![CDATA[
for maintenance_rule in env['x_recurring_maintenance_rules'].search([('x_active', '=', True)]):
    for serial in maintenance_rule.x_product_id.x_serial_ids:
        tasks = env['project.task'].search([('is_fsm', '=', True), ('x_serial_id', '=', serial.id), ('x_recurring_maintenance_rule_id', '=', maintenance_rule.id)])
        last_maintenance = max(tasks.filtered(lambda t: t.state == '1_done').mapped('x_run_time_meter_when_done'), default=0.0)
        on_maintenance = len(tasks.filtered(lambda t: t.state not in ['1_done', '1_canceled'])) > 0
        if not on_maintenance and serial.x_run_time_meter_h - last_maintenance >= maintenance_rule.x_run_time_increment_h:
            project_task = env['project.task'].create({
                'name': '[Recurrent] ' + serial.name,
                'x_serial_id': serial.id,
                'partner_id': env.ref('base.main_company').id,
                'under_warranty': True,
                'x_maintenance': 'recurrent',
                'x_recurring_maintenance_rule_id': maintenance_rule.id,
                'is_fsm': True,
                'project_id': env.ref('industry_fsm.fsm_project').id,
            })
    ]]></field>
    </record>
    <record id="create_recurrent_tasks_cron" model="ir.cron">
        <field name="interval_type">days</field>
        <field name="interval_number">1</field>
        <field name="state">code</field>
        <field name="ir_actions_server_id" ref="create_recurrent_tasks_server_action"/>
    </record>
    <record id="consolidated_down_payment_server_action" model="ir.actions.server">
        <field name="code"><![CDATA[
invoices = []
for partner in records:
    sale_orders = partner.sale_order_ids.filtered(lambda so: so.invoice_status == 'to invoice')
    if len(sale_orders) == 0: continue
    invoice = sale_orders._create_invoices()
    used_invoice_lines = set()
    sequence = 0
    for so in sale_orders:
        last_date = so.x_last_invoice or so.rental_start_date.date() if so.is_rental_order else False
        next_date = min(so.rental_return_date, datetime.datetime.today()).date() if so.is_rental_order else False
        # no grouping is done, so each invoice line is related to 1 sale order line
        invoice_lines = invoice.invoice_line_ids.filtered(lambda line: line.sale_line_ids in so.order_line)
        display_line = env['account.move.line'].create({
            'move_id': invoice.id,
            'display_type': 'line_note',
            'name': '[' + so.display_name + ']' + (last_date.strftime(' %d/%m/%y - ') + next_date.strftime('%d/%m/%y') if so.is_rental_order else ''),
            'sequence': (sequence := sequence + 1),
        })
        ratio = 1
        if so.is_rental_order: ratio = (next_date - last_date).days / so.duration_days
        for line in invoice_lines:
            quantity = (ratio if line.sale_line_ids.is_product_rentable else 1) * line.sale_line_ids.product_uom_qty
            if quantity == 0: continue
            line.write({'quantity': quantity, 'sequence': (sequence := sequence + 1)})
            used_invoice_lines |= set([display_line, line])
        so['x_last_invoice'] = next_date
    invoice['invoice_line_ids'] = [Command.unlink(line.id) for line in invoice.invoice_line_ids if line not in used_invoice_lines]
    if len(invoice.invoice_line_ids) == 0: invoice.unlink()
    else: invoices.append(invoice.id)
if len(invoices) > 0:
    action = env['ir.actions.act_window']._for_xml_id('account.action_move_out_invoice_type')
    action['views'] = [(env.ref('account.view_out_invoice_tree').id, 'list'), (env.ref('account.view_move_form').id, 'form')]
    action['domain'] = [('id', 'in', invoices)]
else: action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {'title': 'Error', 'message': 'Nothing to invoice.', 'type': 'warning'},
} 
    ]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Consolidated Down Payment</field>
    </record>
    <record id="create_corrective_task" model="ir.actions.server">
        <field name="model_id" ref="stock.model_stock_move"/>
        <field name="state">code</field>
        <field name="name">Create Corrective Task</field>
        <field name="usage">base_automation</field>
        <field name="code"><![CDATA[
for record in records:
    if not record.picking_id.quality_check_fail: continue
    for lot in record.move_line_ids.lot_id:
        project_task = env['project.task'].create({
            'name': '[Corrective] ' + lot.name,
            'x_serial_id': lot.id,
            'partner_id': record.picking_id.partner_id.id,
            'under_warranty': True,
            'is_fsm': True,
            'project_id': env.ref('industry_fsm.fsm_project').id,
            'x_maintenance': 'corrective',
        })
        ]]></field>
    </record>
</odoo>
