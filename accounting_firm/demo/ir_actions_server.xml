<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="ir_actions_update_tasks" model="ir.actions.server">
        <field name="code">
            <![CDATA[
ProjectTask = env['project.task']
ProjectTag = env['project.tags']

# Get references
stage_1 = env.ref('accounting_firm.project_task_type_1')
stage_2 = env.ref('accounting_firm.project_task_type_2')
stage_3 = env.ref('accounting_firm.project_task_type_3')
admin_user = env.ref('base.user_admin')

today = datetime.datetime.today()
now = datetime.datetime.now()

# Month and quarter mapping
MONTH_TAGS = {
    'january': 1, 'february': 2, 'march': 3, 'april': 4,
    'may': 5, 'june': 6, 'july': 7, 'august': 8,
    'september': 9, 'october': 10, 'november': 11, 'december': 12
}
QUARTER_STARTS = {
    'q1': 4, 'q2': 7, 'q3': 10, 'q4': 1
}

# Get all relevant tasks
project_tasks = ProjectTask.search([
    ('sale_line_id.order_id', 'in', [
        env.ref('accounting_firm.sale_order_1').id,
        env.ref('accounting_firm.sale_order_2').id
    ]),
    ('stage_id', '=', stage_1.id)
])

# Move tasks to stage 2 if they have current month or quarter tag
month_name = today.strftime('%B').lower()
quarter = f"q{((today.month - 1) // 3 + 1)}".lower()

month_tag = ProjectTag.search([('name', 'ilike', month_name)], limit=1)
quarter_tag = ProjectTag.search([('name', 'ilike', quarter)], limit=1)

if month_tag:
    project_tasks.filtered(lambda t: month_tag in t.tag_ids).write({'stage_id': stage_2.id})

if quarter_tag:
    project_tasks.filtered(lambda t: quarter_tag in t.tag_ids).write({'stage_id': stage_2.id})

# Assign admin user
project_tasks.write({'user_ids': [admin_user.id]})

# Move customer onboarding tasks to stage 3
onboarding_tasks = project_tasks.filtered(lambda t: 'customer onboarding' in (t.name or '').lower())
onboarding_tasks.write({'stage_id': stage_3.id})
for task in onboarding_tasks:
    desc = str(task.description or '')
    desc = desc.replace('<li>', '<li class="o_checked">')
    task.write({'description': desc})

# Templates
product_monthly = [
    env.ref('accounting_firm.product_product_12'),
    env.ref('accounting_firm.product_product_13'),
    env.ref('accounting_firm.product_product_7'),
    env.ref('accounting_firm.product_product_10')
]
product_quarterly = [
    env.ref('accounting_firm.product_product_5'),
    env.ref('accounting_firm.product_product_14'),
]
product_yearly = [
    env.ref('accounting_firm.product_product_4'),
    env.ref('accounting_firm.product_product_15'),
    env.ref('accounting_firm.product_product_8'),
    env.ref('accounting_firm.product_product_3'),
    env.ref('accounting_firm.product_product_9')
]
product_ubo = [
    env.ref('accounting_firm.product_product_6')
]

# Compute next month and year
next_month = today.month % 12 + 1
next_month_year = today.year + (today.month == 12)
current_year = today.year

# Handle deadlines
for task in project_tasks:
    tag_names = [tag.name.lower() for tag in task.tag_ids]
    deadline = None

    # Monthly tag logic (without next())
    month_matches = [month for name, month in MONTH_TAGS.items() if name in tag_names]
    month_num = month_matches[0] if month_matches else None
    if month_num:
        year = current_year + (month_num < next_month or month_num == 12)
        if month_num == 12:
            month_num = 1
        else:
            month_num = month_num + 1
        deadline = datetime.datetime(year, month_num, 20, 23, 55)

    # Quarterly tag logic (without next())
    if not deadline:
        quarter_matches = [month for name, month in QUARTER_STARTS.items() if name in tag_names]
        start_month = quarter_matches[0] if quarter_matches else None
        if start_month:
            year = current_year + (start_month < next_month)
            deadline = datetime.datetime(year, start_month, 25, 23, 55)

    # Yearly task logic
    if not deadline and task.sale_line_id.product_id in product_yearly:
        deadline = datetime.datetime(current_year, 10, 20, 23, 55)
        if today >= deadline:
            deadline = deadline.replace(year=current_year + 1)

    # UBO task logic
    if not deadline and task.sale_line_id.product_id in product_ubo:
        create_date_str = env['ir.config_parameter'].sudo().get_param('database.create_date')
        try:
            db_create_date = datetime.datetime.strptime(create_date_str, "%Y-%m-%d %H:%M:%S")
        except Exception:
            db_create_date = now
        deadline = db_create_date + datetime.timedelta(days=30)
        deadline = deadline.replace(hour=23, minute=55)

    # Template fallback logic
    if not deadline:
        product_id = task.sale_line_id.product_id
        if product_id in product_monthly:
            deadline = datetime.datetime(next_month_year, next_month, 20, 23, 55)
        elif product_id in product_quarterly:
            deadline = datetime.datetime(next_month_year, next_month, 25, 23, 55)

    if deadline and task.name.lower() != 'customer onboarding':
        task.write({'date_deadline': deadline})
    ]]>
        </field>
        <field name="model_id" ref="project.model_project_task" />
        <field name="state">code</field>
        <field name="name">Execute Code</field>
        <field name="base_automation_id" ref="base_automation_1" />
        <field name="usage">base_automation</field>
    </record>
    <record id="ir_actions_update_projects" model="ir.actions.server">
        <field name="code">
            <![CDATA[
to_process = env['project.project'].search([
    ('sale_line_id.order_id', 'in', [env.ref('accounting_firm.sale_order_1').id, env.ref('accounting_firm.sale_order_2').id]),
])
for record in to_process:
    name = record.partner_id.name if record.partner_id else env.company.name
    record.write({
        'name': name,
    })
    record.documents_folder_id.write({
        'alias_name': name,
        'alias_domain_id': env.ref('accounting_firm.mail_alias_domain_1').id,
        'create_activity_type_id': env.ref('documents.mail_documents_activity_data_Inbox').id,
        'create_activity_user_id': env.ref('base.user_admin').id
    })
        ]]>
        </field>
        <field name="model_id" ref="project.model_project_project" />
        <field name="state">code</field>
        <field name="name">Execute Code</field>
        <field name="usage">base_automation</field>
        <field name="base_automation_id" ref="base_automation_2" />
    </record>
</odoo>
